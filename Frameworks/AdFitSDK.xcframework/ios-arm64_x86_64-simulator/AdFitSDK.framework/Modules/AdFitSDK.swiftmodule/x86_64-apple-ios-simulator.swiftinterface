// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdFitSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
@_exported import AdFitSDK
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import Foundation/*.Data*/
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import zlib
@objc public protocol AdFitNativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdDidClickAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BizBoardTemplate : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public static var defaultBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public static var defaultEdgeInset: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor(unsafe) public var bgViewColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewleftMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewRightMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewTopMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewBottomMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension AdFitSDK.BizBoardTemplate : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adMediaView() -> AdFitSDK.AdFitMediaView?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AdFitMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: (any AdFitSDK.AdFitMediaViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public var mediaType: AdFitSDK.AdFitMediaType {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public enum AdFitMediaType : Swift.Int, Swift.CustomStringConvertible {
  case unknown = 0
  case image = 1
  case video = 2
  case mixed = 3
  case carousel = 4
  case motion = 5
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AdFitAdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var infoView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension AdFitSDK.AdFitAdView : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adMediaView() -> AdFitSDK.AdFitMediaView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func customInfoIconView() -> UIKit.UIImageView?
}
extension AdFitSDK.AdFitAdView : AdFitSDK.AdFitMediaViewInternalDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mediaViewVideoDidDurationChange(_ mediaView: AdFitSDK.AdFitMediaView, current: Foundation.TimeInterval, total: Foundation.TimeInterval)
}
@objc @_hasMissingDesignatedInitializers final public class AdFitNativeAd : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any AdFitSDK.AdFitNativeAdDelegate)?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc final public var mediaAspectRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var mediaType: AdFitSDK.AdFitMediaType {
    @objc get
  }
  @objc final public var keywords: Swift.String? {
    @objc get
  }
  @objc final public var title: Swift.String? {
    @objc get
  }
  @objc final public var body: Swift.String? {
    @objc get
  }
  @objc final public var profileName: Swift.String? {
    @objc get
  }
  @objc final public var callToAction: Swift.String? {
    @objc get
  }
  @objc final public let adUnitId: Swift.String?
  @objc final public var options: [Swift.String : Swift.String] {
    @objc get
  }
  @objc final public var reviewId: Swift.String? {
    @objc get
  }
  @objc final public var displayUrl: Swift.String? {
    @objc get
  }
  @objc final public var dspId: Swift.String? {
    @objc get
  }
  @objc final public var adInfoView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc final public var infoIconTopConstant: CoreFoundation.CGFloat
  @objc final public var infoIconBottomConstant: CoreFoundation.CGFloat
  @objc final public var infoIconLeftConstant: CoreFoundation.CGFloat
  @objc final public var infoIconRightConstant: CoreFoundation.CGFloat
  @objc deinit
  @objc final public func bind(_ nativeAdView: UIKit.UIView)
  @objc final public func block()
}
@objc public protocol AdFitNativeAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdLoaderDidReceiveAds(_ nativeAds: [AdFitSDK.AdFitNativeAd])
  @objc optional func nativeAdLoaderDidReceiveAd(_ nativeAd: AdFitSDK.AdFitNativeAd)
  @objc optional func nativeAdLoaderDidFailToReceiveAd(_ nativeAdLoader: AdFitSDK.AdFitNativeAdLoader, error: any Swift.Error)
}
@objc public enum AdFitVideoPlayPolicy : Swift.Int, Swift.CustomStringConvertible {
  case alwaysManualPlay = 0
  case alwaysAutoPlay = 1
  case autoPlayOnWifiOnly = 2
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AdFitBannerAdViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adViewDidReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
  @objc optional func adViewDidFailToReceiveAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView, error: any Swift.Error)
  @objc optional func adViewDidClickAd(_ bannerAdView: AdFitSDK.AdFitBannerAdView)
}
precedencegroup AnchorPriorityOperatorPrecedence {
  associativity: left
  assignment: false
  higherThan: ComparisonPrecedence
  lowerThan: MultiplicationPrecedence
}
infix operator ! : AnchorPriorityOperatorPrecedence
@objc public protocol AdFitMediaViewInternalDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func mediaViewVideoDidDurationChange(_ mediaView: AdFitSDK.AdFitMediaView, current: Foundation.TimeInterval, total: Foundation.TimeInterval)
}
extension AVKit.AVPlayerViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class AdFitBannerAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public var clientId: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var adUnitSize: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: (any AdFitSDK.AdFitBannerAdViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) weak final public var rootViewController: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc override final public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var clipsToBounds: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public init(clientId: Swift.String, adUnitSize: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public init(clientId: Swift.String)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func addSubview(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) final public func loadAd()
}
@objc @_inheritsConvenienceInitializers final public class AdFit : ObjectiveC.NSObject {
  @objc public static var videoPlayPolicy: AdFitSDK.AdFitVideoPlayPolicy
  @objc final public class func configInit()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlainNativeAdView : UIKit.UIView, AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor(unsafe) public var blockHandler: () -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) @objc public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor(unsafe) @objc public func adMediaView() -> AdFitSDK.AdFitMediaView?
  @objc deinit
}
@objc public protocol AdFitMediaViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func mediaViewVideoDidPlay(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidPause(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidComplete(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidMute(_ mediaView: AdFitSDK.AdFitMediaView)
  @objc optional func mediaViewVideoDidUnmute(_ mediaView: AdFitSDK.AdFitMediaView)
}
@objc final public class AdFitNativeAdLoader : ObjectiveC.NSObject {
  @objc final public var ads: [AdFitSDK.AdFitNativeAd]
  @objc final public var firstAd: AdFitSDK.AdFitNativeAd? {
    @objc get
  }
  @objc weak final public var delegate: (any AdFitSDK.AdFitNativeAdLoaderDelegate)?
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc final public var infoIconPosition: AdFitSDK.AdFitInfoIconPosition
  @objc final public var desiredMediaWidth: CoreFoundation.CGFloat
  @objc public init(clientId: Swift.String, count: Swift.Int = 1)
  @objc final public func loadAd(keyword: Swift.String? = nil)
  @objc deinit
}
@objc public enum AdMotionPlayType : Swift.Int {
  case all = 0
  case onlyAnimation = 1
  case stillCut = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BizBoardCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public static var defaultBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) public static var defaultEdgeInset: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor(unsafe) public var bgViewColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewleftMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewRightMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewTopMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bgViewBottomMargin: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc deinit
}
extension AdFitSDK.BizBoardCell : AdFitSDK.AdFitNativeAdRenderable {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adTitleLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adCallToActionButton() -> UIKit.UIButton?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adProfileNameLabel() -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adProfileIconView() -> UIKit.UIImageView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adMediaView() -> AdFitSDK.AdFitMediaView?
}
public enum KakaoIntergration : Swift.Hashable {
  case none
  case sdk(appKey: Swift.String, appUserId: Swift.String)
  case sync(appID: Swift.String, appUserId: Swift.String)
  case account(accountId: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AdFitSDK.KakaoIntergration, b: AdFitSDK.KakaoIntergration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension AdFitSDK.AdFit {
  @objc final public class func register(appKey: Swift.String, appUserId: Swift.String)
  @objc final public class func register(accountId: Swift.String)
  @objc final public class func unregister()
}
@objc public protocol AdFitNativeAdRenderable {
  @objc func adTitleLabel() -> UIKit.UILabel?
  @objc optional func adBodyLabel() -> UIKit.UILabel?
  @objc func adCallToActionButton() -> UIKit.UIButton?
  @objc func adProfileNameLabel() -> UIKit.UILabel?
  @objc func adProfileIconView() -> UIKit.UIImageView?
  @objc func adMediaView() -> AdFitSDK.AdFitMediaView?
  @objc optional func customInfoIconView() -> UIKit.UIImageView?
}
@objc public enum AdFitInfoIconPosition : Swift.Int, Swift.CustomStringConvertible {
  case topLeft = 0
  case topRight = 1
  case bottomLeft = 2
  case bottomRight = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AdFitSDK.AdFitMediaType : Swift.Equatable {}
extension AdFitSDK.AdFitMediaType : Swift.Hashable {}
extension AdFitSDK.AdFitMediaType : Swift.RawRepresentable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.Equatable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.Hashable {}
extension AdFitSDK.AdFitVideoPlayPolicy : Swift.RawRepresentable {}
extension AdFitSDK.AdMotionPlayType : Swift.Equatable {}
extension AdFitSDK.AdMotionPlayType : Swift.Hashable {}
extension AdFitSDK.AdMotionPlayType : Swift.RawRepresentable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.Equatable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.Hashable {}
extension AdFitSDK.AdFitInfoIconPosition : Swift.RawRepresentable {}
